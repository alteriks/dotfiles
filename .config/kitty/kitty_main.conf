# vim:fileencoding=utf-8:ft=conf
# include ~/.config/kitty/tokyonight_storm.conf
# include ~/.config/kitty/${HOSTNAME}.conf

# Font family. You can also specify different fonts for the
# bold/italic/bold-italic variants. By default they are derived automatically,
# by the OSes font system. Setting them manually is useful for font families
# that have many weight variants like Book, Medium, Thick, etc. For example:
# font_family Operator Mono Book
# bold_font Operator Mono Thick
# bold_italic_font Operator Mono Medium
# font_family      DejaVu Sans Mono for Powerline Book
# font_family      Caskaydia Cove SemiBold Nerd Font Complete Mono
# Ligatures
font_family      CaskaydiaCove Nerd Font
# list all fonts detected by kitty
# kitty +list-fonts

disable_ligatures always

#font_family      Hack
italic_font      Caskaydia Cove Nerd Font Complete Mono Italic
bold_font        Caskaydia Cove Nerd Font Complete Mono Bold
bold_italic_font Caskaydia Cove Nerd Font Complete Mono SemiLight Italic

# Font size (in pts)
font_size       12.5

# The cursor color
# cursor           #ffffff

#cursor_text_color background

# The cursor shape can be one of (block, beam, underline)
cursor_shape     block
cursor_beam_thickness 2.8

# The interval (in seconds) at which to blink the cursor. Set to zero to
# disable blinking.
cursor_blink_interval     0.5

# Stop blinking cursor after the specified number of seconds of keyboard inactivity. Set to
# zero to never stop blinking.
cursor_stop_blinking_after 15.0

# Number of lines of history to keep in memory for scrolling back
scrollback_lines 20000

scrollback_indicator_opacity 1.0

#
# Program with which to view scrollback in a new window. The scrollback buffer is passed as
# 
# STDIN to this program. If you change it, make sure the program you use can
# handle ANSI escape sequences for colors and text formatting.
# scrollback_pager less +G -R

# Wheel scroll multiplier (modify the amount scrolled by the mouse wheel). Use negative
# numbers to change scroll direction.
wheel_scroll_multiplier 5.0

# The interval between successive clicks to detect double/triple clicks (in seconds)
click_interval 0.5
# Reload kitty.conf#
map ctrl+shift+f5 load_config_file


# Characters considered part of a word when double clicking. In addition to these characters
# any character that is marked as an alpha-numeric character in the unicode
# database will be matched.
select_by_word_characters :@-./_~?&=%+#

# Hide mouse cursor after the specified number of seconds of the mouse not being used. Set to
# zero to disable mouse cursor hiding.
#mouse_hide_wait 3.0
mouse_hide_wait 0

# The enabled window layouts. A comma separated list of layout names. The special value * means
# all layouts. The first listed layout will be used as the startup layout.
# For a list of available layouts, see the file layouts.py
enabled_layouts *

# If enabled, the window size will be remembered so that new instances of kitty will have the same
# size as the previous instance. If disabled, the window will initially have size configured
# by initial_window_width/height, in pixels.
remember_window_size   yes
initial_window_width   640
initial_window_height  400

# Delay (in milliseconds) between screen updates. Decreasing it, increases fps
# at the cost of more CPU usage. The default value yields ~100fps which is more
# that sufficient for most uses.
repaint_delay   5

#Delay (in milliseconds) before input from the program running in the terminal is processed. Note that
#decreasing it will increase responsiveness, but also increase CPU usage and might cause flicker in
#full screen programs that redraw the entire screen on each loop, because kitty is so fast that partial
#screen updates will be drawn.
input_delay 2

# Visual bell duration. Flash the screen when a bell occurs for the specified number of
# seconds. Set to zero to disable.
visual_bell_duration 0.0

# Enable/disable the audio bell. Useful in environments that require silence.
enable_audio_bell no

# The program with which to open URLs that are clicked on. The special value "default" means to
# use the operating system's default URL handler.
open_url_with default

# The value of the TERM environment variable to set
term xterm-kitty

# The width (in pts) of window borders. Will be rounded to the nearest number of pixels based on screen resolution.
window_border_width 1

# The window margin (in pts) (blank area outside the border)
window_margin_width 0

# The window padding (in pts) (blank area between the text and the window border)
window_padding_width 0

# The color for the border of the active window
# active_border_color #00ff00

# The color for the border of inactive windows
# inactive_border_color #cccccc

# Tab-bar colors
# active_tab_foreground #000
# active_tab_background #eee
# inactive_tab_foreground #444
# inactive_tab_background #999



# Key mapping
# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html
# You can use the special action no_op to unmap a keyboard shortcut that is
# assigned in the default configuration.

#Disable concatenation
clipboard_control no-append

# Clipboard
paste_actions quote-urls-at-prompt,no-op
map ctrl+shift+v        paste_from_clipboard
map ctrl+shift+s        paste_from_selection
map ctrl+shift+c        copy_to_clipboard
map shift+insert        paste_from_clipboard


map ctrl+shift+f launch --type=overlay --stdin-source=@screen_scrollback /usr/bin/fzf --no-sort --no-mouse --exact -i --tac
# map ctrl+f launch --type=overlay --stdin-source=@screen_scrollback /bin/sh -c 'cat > ~/tmp/kitty.log'
# map ctrl+f launch --type=overlay --stdin-source=@screen_scrollback /usr/bin/moar -colors 16M
# map ctrl+f launch --type=overlay --stdin-source=@screen_scrollback /usr/bin/bat --paging=always --force-colorization --style=plain
# map ctrl+f launch --type=overlay --stdin-source=@screen_scrollback /usr/bin/most +G
# map ctrl+f launch --type=overlay --stdin-source=@screen_scrollback /usr/bin/less -i +G
# map ctrl+f launch --type=overlay --stdin-source=@screen_scrollback sh -c '/home/alteriks/tmp/vtclean/vtclean/vtclean | nvim -c "normal G"'
# map ctrl+f launch --type=overlay --stdin-source=@screen_scrollback sh -c 'nvim -c "lua local baleia = require(\"baleia\").setup({}); baleia.once(0)" -c "map <silent> q :qa!<CR>"'
# map ctrl+f launch --type=overlay --stdin-source=@screen_scrollback sh -c 'nvim -c "lua local baleia = require(\"baleia\").setup({}); baleia.once(0)" -c "map <silent> q :qa!<CR>"'
# map ctrl+f launch --type=overlay --stdin-source=@screen_scrollback sh -c 'nvim -c "normal G"'
# map ctrl+f launch --type=overlay --stdin-source=@screen_scrollback /usr/bin/nvimpager +$
# map ctrl+f combine : show_scrollback : send_text normal,application /

# map ctrl+shift+f --allow-remote-control kitty +kitten kitty_search/search.py @active-kitty-window-id
map ctrl+shift+p>w kitten hints --type word --program -

allow_remote_control socket-only
listen_on unix:/tmp/kitty
shell_integration enabled
# shell_integration  no-cursor
# kitty-scrollback.nvim Kitten alias
action_alias kitty_scrollback_nvim kitten /home/alteriks/.local/share/nvim/lazy/kitty-scrollback.nvim/python/kitty_scrollback_nvim.py --cwd /home/alteriks/.local/share/nvim/lazy/kitty-scrollback.nvim/lua/kitty-scrollback/configs

# Browse scrollback buffer in nvim
map ctrl+f kitty_scrollback_nvim --nvim-args --clean --noplugin -n --cmd 'set number'
# map ctrl+f kitty_scrollback_nvim --nvim-args --clean --noplugin -n +"set statusline=%t\ %=%-14.(%l,%c%V%)\ %P" +"set laststatus=2"
map ctrl+shift+h kitty_scrollback_nvim
# Browse output of the last shell command in nvim
map ctrl+shift+g kitty_scrollback_nvim --config-file get_text_last_cmd_output.lua
# Show clicked command output in nvim
mouse_map ctrl+shift+right press ungrabbed combine : mouse_select_command_output : kitty_scrollback_nvim --config-file get_text_last_visited_cmd_output.lua


# Scrolling
map ctrl+shift+up        scroll_line_up
map ctrl+shift+down      scroll_line_down
#map ctrl+shift+k         scroll_line_up
map ctrl+shift+k         no_op
#map ctrl+shift+j         scroll_line_down
map ctrl+shift+j         no_op
map ctrl+shift+page_up   scroll_page_up
map ctrl+shift+page_down scroll_page_down
map ctrl+shift+home      scroll_home
map ctrl+shift+end       scroll_end
# map ctrl+shift+h         show_scrollback
# map ctrl+shift+h         no_op

# Window management
map ctrl+shift+enter    no_op
#map ctrl+shift+w        close_window
map ctrl+shift+w        no_op
#map ctrl+shift+]        next_window
#map ctrl+shift+[        previous_window
#map ctrl+shift+f        move_window_forward
#map ctrl+shift+b        move_window_backward
#map ctrl+shift+`        move_window_to_top
#map ctrl+shift+1        first_window
#map ctrl+shift+2        second_window
#map ctrl+shift+3        third_window
#map ctrl+shift+4        fourth_window
#map ctrl+shift+5        fifth_window
#map ctrl+shift+6        sixth_window
#map ctrl+shift+7        seventh_window
#map ctrl+shift+8        eighth_window
#map ctrl+shift+9        ninth_window
#map ctrl+shift+0        tenth_window
map ctrl+shift+1        no_op
map ctrl+shift+2        no_op
map ctrl+shift+3        no_op
map ctrl+shift+4        no_op
map ctrl+shift+5        no_op
map ctrl+shift+6        no_op
map ctrl+shift+7        no_op
map ctrl+shift+8        no_op
map ctrl+shift+9        no_op
map ctrl+shift+0        no_op

# Tab management
#map ctrl+shift+right    next_tab
map ctrl+shift+right    no_op
#map ctrl+shift+left     previous_tab
map ctrl+shift+left     no_op
#map ctrl+shift+t        new_tab
#map ctrl+shift+q        close_tab
#map ctrl+shift+l        next_layout
#map ctrl+shift+.        move_tab_forward
#map ctrl+shift+,        move_tab_backward

# Miscellaneous
map ctrl+shift+equal    increase_font_size
map ctrl+shift+minus    decrease_font_size
#map ctrl+shift+backspace restore_font_size
map ctrl+shift+backspace no_op
# map ctrl+o pass_selection_to_program

# Sending arbitrary text on shortcut key presses
# You can tell kitty to send arbitrary (UTF-8) encoded text to
# the client program when pressing specified shortcut keys. For example:
# send_text all ctrl+alt+a Special text
# This will send "Special text" when you press the Ctrl+Alt+a key combination.
# The text to be sent is a python string literal so you can use escapes like
# \x1b to send control codes or \u21fb to send unicode characters (or you can
# just input the unicode characters directly as UTF-8 text). The first argument
# to send_text is the keyboard modes in which to activate the shortcut. The possible
# values are normal or application or kitty or a comma separated combination of them.
# The special keyword all means all modes. The modes normal and application refer to
# the DECCKM cursor key mode for terminals, and kitty refers to the special kitty
# extended keyboard protocol. Another example, that outputs a word and then moves the cursor
# to the start of the line (same as pressing the Home key):
# send_text normal ctrl+alt+a Word\x1b[H
# send_text application ctrl+alt+a Word\x1bOH

# Use specific font for a range of UTF symbols
# symbol_map U+23FB-U+23FE,U+2B58,U+E200-U+E2A9,U+E0A0-U+E0A3,U+E0B0-U+E0BF,U+E0C0-U+E0C8,U+E0CC-U+E0CF,U+E0D0-U+E0D2,U+E0D4,U+E700-U+E7C5,U+F000-U+F2E0,U+2665,U+26A1,U+F400-U+F4A8,U+F67C,U+E000-U+E00A,U+F300-U+F313,U+E5FA-U+E62B Symbols Nerd Font
# symbol_map U+23FB-U+23FE,U+2B58,U+E200-U+E2A9,U+E0A0-U+E0A3,U+E0B0-U+E0BF,U+E0C0-U+E0C8,U+E0CC-U+E0CF,U+E0D0-U+E0D2,U+E0D4,U+E700-U+E7C5,U+F000-U+F2E0,U+2665,U+26A1,U+F400-U+F4A8,U+F67C,U+E000-U+E00A,U+F300-U+F313,U+E5FA-U+E62B 3270 Nerd Font
# symbol_map U+23FB-U+23FE,U+2B58,U+E200-U+E2A9,U+E0A0-U+E0A3,U+E0B0-U+E0BF,U+E0C0-U+E0C8,U+E0CC-U+E0CF,U+E0D0-U+E0D2,U+E0D4,U+E700-U+E7C5,U+F000-U+F2E0,U+2665,U+26A1,U+F400-U+F4A8,U+F67C,U+E000-U+E00A,U+F300-U+F313,U+E5FA-U+E62B IBM 3270 Nerd Font Complete
#
clipboard_control write-clipboard write-primary read-clipboard read-primary

share_connections yes

# notify_on_cmd_finish always 2 notify
# # notify_on_cmd_finish invisible 2 command notify-send "job finished with status: %s" %c
# filter_notification app:"[ng]?vim"
# filter_notification app:"top"
# # filter_notification all
#
# filter_notification name:"top"
# # filter_notification title:regexp:"^.?top$"
