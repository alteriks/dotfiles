# vim ft=sh

arpscan() {
  ARPSCAN_NET=$1
  if [[ -z $ARPSCAN_NET ]]; then
    DEFAULT_ROUTE=$(ip route show default 0.0.0.0/0 | awk '{print $3}')
    ARPSCAN_NET=${DEFAULT_ROUTE}/24
  fi
  sudo nmap -sP $ARPSCAN_NET | awk '/Nmap scan report for/{printf $5;}/MAC Address:/{print " => "$3" "$4$5$6$7$8;}' | sort
  #RPi4=DC:A6:32
  #RPiZ=B8:27:EB
}

dce() {
  NAME=$(docker-compose ps --services | head -n1)
  NAME=${1:-$NAME}
  echo "docker-compose exec $NAME sh"
  docker-compose exec $NAME sh
}

#https://superuser.com/questions/565443/generate-distribution-of-file-sizes-from-the-command-prompt/1100340#1100340
filesizedistribution() {
  find . -type f -print0                                                   \
   | xargs -0 ls -l                                                        \
   | awk '{ n=int(log($5)/log(2));                                         \
            if (n<10) { n=10; }                                            \
            size[n]++ }                                                    \
        END { for (i in size) printf("%d %d\n", 2^i, size[i]) }'           \
   | sort -n                                                               \
   | awk 'function human(x) { x[1]/=1024;                                  \
                              if (x[1]>=1024) { x[2]++;                    \
                                                human(x) } }               \
          { a[1]=$1;                                                       \
            a[2]=0;                                                        \
            human(a);                                                      \
            printf("%3d%s: %6d\n", a[1],substr("kMGTEPYZ",a[2]+1,1),$2) }'
}

# https://stackoverflow.com/questions/6918057/shell-list-directories-ordered-by-file-count-including-in-subdirectories
filecount() {
  find . -type f | cut -d "/" -f 2 | sort | uniq -c | sort -n
}

git() {
  if [[ $@ == "diffmeld" ]]; then
    command git difftool -t meld
  else
    command git "$@"
  fi
}

journalctl() {
  if [[ -n $@ ]]; then
    command journalctl "$@"
  else
    command journalctl -f -n 100
  fi
}

ip() {
  if [[ -n $@ ]]; then
    command ip "$@"
  else
    # only IPv4, cut every third line
    # command ip -c -4 a | sed '0~3d'
    command ip -c -br -4 a
  fi
}

pacman_update_ignoredpkg() {
  IGNOREDPKG=$( /bin/cat /etc/pacman.d/ignorepkg/all.conf /etc/pacman.d/ignorepkg/${HOSTNAME}.conf | awk -F' = ' '{ print $2 }' ORS=' ' )
  sudo pacman -Syu $(echo $IGNOREDPKG)
}

rga-fzf() {
  RG_PREFIX="rga --files-with-matches"
  local file
  file="$(
  FZF_DEFAULT_COMMAND="$RG_PREFIX '$1'" \
    fzf --sort --preview="[[ ! -z {} ]] && rga --pretty --context 5 {q} {}" \
    --phony -q "$1" \
    --bind "change:reload:$RG_PREFIX {q}" \
    --preview-window="70%:wrap"
    )" &&
      echo "opening $file" &&
      xdg-open "$file"
}

# systemctl start/stop && status
sc() {
  name="${@:(2)}";
  echo "COMMAND: ${1}, NAME: ${name}";
  systemctl "${1}" ${name};
  systemctl status ${name};
}

step-cli-ca() {
  step-cli ca certificate $1 $1.crt $1.key --not-after=17520h
}

test_ip_port() {
  while read -r ip port; do
    if [[ -z ${port} ]]; then
      port=22
    fi
    if [[ -z ${ip} ]]; then
      echo Exiting...
      return
      # /dev/tcp/ can resolve DNS names
      # elif [[ ! $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
      #   ip=$( dig +short ${ip} )
    fi
    if timeout 4 bash -c "cat < /dev/null >/dev/tcp/${ip}/${port}"; then
      echo -e "${ip}:${port}\tSuccess"
    else
      echo -e "${ip}:${port}\tFailure"
    fi
  done < "${1:-/dev/stdin}"
}

timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do
    /usr/bin/time -p $shell -i -c exit;
  done
}

#https://wiki.archlinux.org/index.php/Systemd/User#Kill_user_processes_on_logout
tmux() {
  if [[ $# == 0 ]]; then
    TMUX_SESSION_COUNT=$(/usr/bin/tmux list-sessions 2>/dev/null |grep -c window)
    if [[ $TMUX_SESSION_COUNT == 0 ]]; then
      systemd-run --scope --user /usr/bin/tmux
    elif [[ $TMUX_SESSION_COUNT == 1 ]]; then
      /usr/bin/tmux attach-session
    else
      /usr/bin/tmux list-session
    fi
  else
    /usr/bin/tmux $@
  fi
}

urandom() {
  #https://serverfault.com/questions/6440/is-there-an-alternative-to-dev-urandom
  dd if=/dev/zero bs=16M count=16 | openssl enc -aes-256-ctr -pass pass:"$(dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64)" -nosalt | pv > $1
}

qrcode() {
  echo $1 | qrencode -t ASCII -o - | sed 's/#/â–ˆ/g'
  #:w ++enc=utf-8:w ++enc=utf-8
}

qrcode_utf8() {
  echo $1 | qrencode -t ansiutf8
}

vagrant_prepare() {
  if [[ -z "$1" ]]; then
    echo "No argument supplied"
  else
    cd ~/Vagrant/
    mkdir -p $1
    V_TEMPLATE=${1%%[0-9]*}
    if [[ -d 00_template/${V_TEMPLATE} ]]; then
      cp 00_template/${V_TEMPLATE}/Vagrantfile $1
    else
      cp 00_template/base/Vagrantfile $1
    fi
    cd $1
    print -z vagrant up
  fi
}

vagrant_diff() {
  DIRNAME=$(basename $(pwd))
  V_TEMPLATE=${DIRNAME%%[0-9]*}
  if [[ -d ../00_template/${V_TEMPLATE} ]]; then
    echo " === ${V_TEMPLATE}/Vagrantfile <-> Vagrantfile === "
    diff ../00_template/${V_TEMPLATE}/Vagrantfile Vagrantfile
  else
    echo " === base/Vagrantfile <-> Vagrantfile === "
    diff ../00_template/base/Vagrantfile Vagrantfile
  fi
}

YADM() {
  RED='\033[0;31m'
  GREEN='\033[0;32m'
  NC='\033[0m' # No Color

  if [[ $EUID -ge 1000 ]]; then
    echo
    echo -n "Commit: "
    yadm commit --short
    yadm commit -qam "auto-commit ${HOSTNAME}"
  fi
  echo
  echo -e "${GREEN}[+] YADM${NC}"
  echo -n "Pull: "
  yadm pull;
  if [[ $EUID -ge 1000 ]]; then
    echo -ne "\nPush: "
    yadm push
  fi

  echo
  echo -e "${GREEN}[+] PRIVYADM${NC}"
  echo -n "Pull: "
  yadm --yadm-data $XDG_DATA_HOME/yadm/priv.git pull
  if [[ $EUID -ge 1000 ]]; then
    echo -n "Commit: "
    yadm --yadm-data $XDG_DATA_HOME/yadm/priv.git commit --short
    yadm --yadm-data $XDG_DATA_HOME/yadm/priv.git commit -qam "auto-commit ${HOSTNAME}"
    echo -ne "\nPush: "
    yadm --yadm-data $XDG_DATA_HOME/yadm/priv.git push
  fi

  if [[ $EUID -eq 0 ]]; then
    echo
      echo -e "${RED}[+] SYSYADM${NC}"
      echo -n "Pull: "
      yadm --yadm-data /etc/yadm/ pull
      echo -n "Commit: "
      yadm --yadm-data /etc/yadm/ commit --short
      yadm --yadm-data /etc/yadm/ commit -qam "auto-commit ${HOSTNAME}"
      echo -ne "\nPush: "
      yadm --yadm-data /etc/yadm/ push
  fi

  echo
  source ~/bin/yadm/arch/functions
  META="base-devel|xorg-apps"
  PACMAN_NOT_INSTALLED=$(cat ~/bin/yadm/arch/pacman/{all,*${HOSTNAME}*} | egrep -v $META | eval $STRIP |  pacman -Qq - 1>/dev/null 2> >( grep error: | awk -F\' '{print $2}' ))
  if [[ -n $PACMAN_NOT_INSTALLED ]]; then
    echo -e "${RED}[+] MISSING PACMAN PACKAGES${NC}"
    echo $PACMAN_NOT_INSTALLED
  fi

  AUR_NOT_INSTALLED=$(cat ~/bin/yadm/arch/aur/{all,*${HOSTNAME}*} | egrep -v $META | eval $STRIP |  pacman -Qq - 1>/dev/null 2> >( grep error: | awk -F\' '{print $2}' ))
  if [[ -n $AUR_NOT_INSTALLED ]]; then
    echo
    echo -e "${RED}[+] MISSING AUR PACKAGES${NC}"
    echo $AUR_NOT_INSTALLED
  fi
}
